/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.weatherstation.server.database.codegen.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import uk.co.raubach.weatherstation.server.database.codegen.WeatherstationDb;
import uk.co.raubach.weatherstation.server.database.codegen.tables.records.MeasurementsRecord;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurements extends TableImpl<MeasurementsRecord> {

    private static final long serialVersionUID = -1785356869;

    /**
     * The reference instance of <code>weatherstation_db.measurements</code>
     */
    public static final Measurements MEASUREMENTS = new Measurements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementsRecord> getRecordType() {
        return MeasurementsRecord.class;
    }

    /**
     * The column <code>weatherstation_db.measurements.id</code>.
     */
    public final TableField<MeasurementsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>weatherstation_db.measurements.ambient_temp</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> AMBIENT_TEMP = createField("ambient_temp", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.ground_temp</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> GROUND_TEMP = createField("ground_temp", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.pressure</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> PRESSURE = createField("pressure", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.humidity</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> HUMIDITY = createField("humidity", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.wind_average</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> WIND_AVERAGE = createField("wind_average", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.wind_speed</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> WIND_SPEED = createField("wind_speed", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.wind_gust</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> WIND_GUST = createField("wind_gust", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.rainfall</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> RAINFALL = createField("rainfall", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.pi_temp</code>.
     */
    public final TableField<MeasurementsRecord, BigDecimal> PI_TEMP = createField("pi_temp", org.jooq.impl.SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.measurements.created</code>.
     */
    public final TableField<MeasurementsRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>weatherstation_db.measurements</code> table reference
     */
    public Measurements() {
        this(DSL.name("measurements"), null);
    }

    /**
     * Create an aliased <code>weatherstation_db.measurements</code> table reference
     */
    public Measurements(String alias) {
        this(DSL.name(alias), MEASUREMENTS);
    }

    /**
     * Create an aliased <code>weatherstation_db.measurements</code> table reference
     */
    public Measurements(Name alias) {
        this(alias, MEASUREMENTS);
    }

    private Measurements(Name alias, Table<MeasurementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurements(Name alias, Table<MeasurementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return WeatherstationDb.WEATHERSTATION_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MeasurementsRecord, Long> getIdentity() {
        return Internal.createIdentity(uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS, uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeasurementsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS, "KEY_measurements_PRIMARY", uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeasurementsRecord>> getKeys() {
        return Arrays.<UniqueKey<MeasurementsRecord>>asList(
              Internal.createUniqueKey(uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS, "KEY_measurements_PRIMARY", uk.co.raubach.weatherstation.server.database.codegen.tables.Measurements.MEASUREMENTS.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Measurements as(String alias) {
        return new Measurements(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Measurements as(Name alias) {
        return new Measurements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurements rename(String name) {
        return new Measurements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurements rename(Name name) {
        return new Measurements(name, null);
    }
// @formatter:on
}
