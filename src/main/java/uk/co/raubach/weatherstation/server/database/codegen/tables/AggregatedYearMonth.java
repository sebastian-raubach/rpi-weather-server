/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.weatherstation.server.database.codegen.tables;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.raubach.weatherstation.server.database.codegen.WeatherstationDb;
import uk.co.raubach.weatherstation.server.database.codegen.tables.records.AggregatedYearMonthRecord;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggregatedYearMonth extends TableImpl<AggregatedYearMonthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>weatherstation_db.aggregated_year_month</code>
     */
    public static final AggregatedYearMonth AGGREGATED_YEAR_MONTH = new AggregatedYearMonth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AggregatedYearMonthRecord> getRecordType() {
        return AggregatedYearMonthRecord.class;
    }

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_ambient_temp</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_AMBIENT_TEMP = createField(DSL.name("avg_ambient_temp"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_ground_temp</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_GROUND_TEMP = createField(DSL.name("avg_ground_temp"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.aggregated_year_month.avg_lux</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_LUX = createField(DSL.name("avg_lux"), SQLDataType.DECIMAL(8, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_pressure</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_PRESSURE = createField(DSL.name("avg_pressure"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_humidity</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_HUMIDITY = createField(DSL.name("avg_humidity"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_wind_speed</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_WIND_SPEED = createField(DSL.name("avg_wind_speed"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.avg_wind_gust</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> AVG_WIND_GUST = createField(DSL.name("avg_wind_gust"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column
     * <code>weatherstation_db.aggregated_year_month.sum_rainfall</code>.
     */
    public final TableField<AggregatedYearMonthRecord, BigDecimal> SUM_RAINFALL = createField(DSL.name("sum_rainfall"), SQLDataType.DECIMAL(6, 2), this, "");

    /**
     * The column <code>weatherstation_db.aggregated_year_month.year</code>.
     */
    public final TableField<AggregatedYearMonthRecord, Short> YEAR = createField(DSL.name("year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>weatherstation_db.aggregated_year_month.month</code>.
     */
    public final TableField<AggregatedYearMonthRecord, Short> MONTH = createField(DSL.name("month"), SQLDataType.SMALLINT.nullable(false), this, "");

    private AggregatedYearMonth(Name alias, Table<AggregatedYearMonthRecord> aliased) {
        this(alias, aliased, null);
    }

    private AggregatedYearMonth(Name alias, Table<AggregatedYearMonthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>weatherstation_db.aggregated_year_month</code>
     * table reference
     */
    public AggregatedYearMonth(String alias) {
        this(DSL.name(alias), AGGREGATED_YEAR_MONTH);
    }

    /**
     * Create an aliased <code>weatherstation_db.aggregated_year_month</code>
     * table reference
     */
    public AggregatedYearMonth(Name alias) {
        this(alias, AGGREGATED_YEAR_MONTH);
    }

    /**
     * Create a <code>weatherstation_db.aggregated_year_month</code> table
     * reference
     */
    public AggregatedYearMonth() {
        this(DSL.name("aggregated_year_month"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : WeatherstationDb.WEATHERSTATION_DB;
    }

    @Override
    public UniqueKey<AggregatedYearMonthRecord> getPrimaryKey() {
        return Internal.createUniqueKey(AggregatedYearMonth.AGGREGATED_YEAR_MONTH, DSL.name("KEY_aggregated_year_month_PRIMARY"), new TableField[] { AggregatedYearMonth.AGGREGATED_YEAR_MONTH.YEAR, AggregatedYearMonth.AGGREGATED_YEAR_MONTH.MONTH }, true);
    }

    @Override
    public AggregatedYearMonth as(String alias) {
        return new AggregatedYearMonth(DSL.name(alias), this);
    }

    @Override
    public AggregatedYearMonth as(Name alias) {
        return new AggregatedYearMonth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregatedYearMonth rename(String name) {
        return new AggregatedYearMonth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AggregatedYearMonth rename(Name name) {
        return new AggregatedYearMonth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Short, Short> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
    // @formatter:on
}
